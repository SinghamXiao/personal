#The ARG instruction defines a variable that users can pass at build-time to the builder with the docker build command using the --build-arg <varname>=<value> flag. If a user specifies a build argument that was #not defined in the Dockerfile, the build outputs a warning.
#[Warning] One or more build-args [foo] were not consumed.

#The FROM instruction initializes a new build stage and sets the Base Image for subsequent instructions. As such, a valid Dockerfile must start with a FROM instruction.
ARG BASE_VERSION=latest
FROM ubuntu:${BASE_VERSION}

#The LABEL instruction adds metadata to an image.
LABEL docker_user="singham xiao" \
      version=1.0 \
      mail=docker_user@mail.com

ARG BASE_VERSION

#The RUN instruction will execute any commands in a new layer on top of the current image and commit the results. The resulting committed image will be used for the next step in the Dockerfile.
#shell form, the command is run in a shell, which by default is /bin/sh -c on Linux or cmd /S /C on Windows
RUN echo ${BASE_VERSION}
RUN /bin/bash -c 'source $HOME/.bashrc; echo $HOME'

#exec form
RUN ["/bin/bash", "-c", "echo hello"]

#There can only be one CMD instruction in a Dockerfile. If you list more than one CMD then only the last CMD will take effect.
#When used in the shell or exec formats, the CMD instruction sets the command to be executed when running the image
CMD echo "This is a test."
CMD ["/bin/bash","ls", "-la"]
CMD ["ls", "-la"]

#The EXPOSE instruction informs Docker that the container listens on the specified network ports at runtime.
#The EXPOSE instruction does not actually publish the port. It functions as a type of documentation between the person who builds the image and the person who runs the container, about which ports are intended to be published. To actually publish the port when running the container, use the -p flag on docker run to publish and map one or more ports, or the -P flag to publish all exposed ports and map them to high-order ports.
EXPOSE 80/tcp
EXPOSE 80/udp

#The ENV instruction sets the environment variable <key> to the value <value>. 
ENV PATH /usr/local/bin:$PATH
ENV abc=hello  
ENV abc=bye def=$abc  
ENV ghi=${abc}

#The ADD instruction copies new files, directories or remote file URLs from <src> and adds them to the filesystem of the image at the path <dest>.
ADD --chown=1 files* /somedir/
ADD --chown=10:11 ["files*", "/somedir/"]
#auto unzip
ADD zip.tar /myzip

#The COPY instruction copies new files or directories from <src> and adds them to the filesystem of the container at the path <dest>.
COPY --chown=1 files* /somedir/
COPY --chown=10:11 ["files*", "/somedir/"]
#not unzip
COPY zip.tar /myzip

#An ENTRYPOINT allows you to configure a container that will run as an executable.
#Command line arguments to docker run <image> will be appended after all elements in an exec form ENTRYPOINT,
#and will override all elements specified using CMD. This allows arguments to be passed to the entry point, i.e., docker run <image> -d will pass the -d argument to the entry point.
#Only the last ENTRYPOINT instruction in the Dockerfile will have an effect.

#                           No ENTRYPOINT			    ENTRYPOINT exec_entry p1_entry 	ENTRYPOINT [“exec_entry”, “p1_entry”]
#No CMD                     error, not allowed 		    /bin/sh -c exec_entry p1_entry 	exec_entry p1_entry
#CMD [“exec_cmd”, “p1_cmd”]	exec_cmd p1_cmd 		    /bin/sh -c exec_entry p1_entry 	exec_entry p1_entry exec_cmd p1_cmd
#CMD [“p1_cmd”, “p2_cmd”]	p1_cmd p2_cmd 			    /bin/sh -c exec_entry p1_entry 	exec_entry p1_entry p1_cmd p2_cmd
#CMD exec_cmd p1_cmd		/bin/sh -c exec_cmd p1_cmd 	/bin/sh -c exec_entry p1_entry 	exec_entry p1_entry /bin/sh -c exec_cmd p1_cmd

#使用 RUN 指令安装应用和软件包，构建镜像。
#如果 Docker 镜像的用途是运行应用程序或服务，比如运行一个 MySQL，应该优先使用 Exec 格式的 ENTRYPOINT 指令。CMD 可为 ENTRYPOINT 提供额外的默认参数，同时可利用 docker run 命令行替换默认参数。
#如果想为容器设置默认的启动命令，可使用 CMD 指令。用户可在 docker run 命令行中替换此默认命令。


#The VOLUME instruction creates a mount point with the specified name and marks it as holding externally mounted volumes from native host or other containers.
VOLUME ["/var/log/", "/tmp"]
VOLUME /var/log/ /tmp

#The USER instruction sets the user name (or UID) and optionally the user group (or GID) to use when running the image and for any RUN, CMD and ENTRYPOINT instructions that follow it in the Dockerfile.
#When the user doesn’t have a primary group then the image (or the next instructions) will be run with the root group.
USER root

#The WORKDIR instruction sets the working directory for any RUN, CMD, ENTRYPOINT, COPY and ADD instructions that follow it in the Dockerfile.
#If the WORKDIR doesn’t exist, it will be created even if it’s not used in any subsequent Dockerfile instruction.
WORKDIR /path/to/workdir

#The WORKDIR instruction can be used multiple times in a Dockerfile. If a relative path is provided, it will be relative to the path of the previous WORKDIR instruction
WORKDIR /a
WORKDIR b
WORKDIR c
RUN pwd
#/a/b/c

#The ONBUILD instruction adds to the image a trigger instruction to be executed at a later time, when the image is used as the base for another build.
#The trigger will be executed in the context of the downstream build, as if it had been inserted immediately after the FROM instruction in the downstream Dockerfile.
ONBUILD ADD ../../../../Desktop /app/src

#The STOPSIGNAL instruction sets the system call signal that will be sent to the container to exit.
#This signal can be a valid unsigned number that matches a position in the kernel’s syscall table, for instance 9, or a signal name in the format SIGNAME, for instance SIGKILL.
STOPSIGNAL SIGHUP

#The HEALTHCHECK instruction tells Docker how to test a container to check that it is still working.
#This can detect cases such as a web server that is stuck in an infinite loop and unable to handle new connections, even though the server process is still running.
HEALTHCHECK --interval=5m --timeout=3s CMD curl -f http://localhost/ || exit 1

#The SHELL instruction allows the default shell used for the shell form of commands to be overridden.
#The default shell on Linux is ["/bin/sh", "-c"], and on Windows is ["cmd", "/S", "/C"].

# Executed as powershell -command Write-Host hello
SHELL ["powershell", "-command"]
RUN Write-Host hello


#https://docs.docker.com/engine/reference/builder/#from
#https://github.com/yeasy/docker_practice/tree/master/image/dockerfile
#https://www.cnblogs.com/CloudMan6/p/6875834.html




